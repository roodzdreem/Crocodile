//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientGame.ChatClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatClient.IServiceChat", CallbackContract=typeof(ClientGame.ChatClient.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        int Connect(string name, bool haveArtist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name, bool haveArtist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/StartGame", ReplyAction="http://tempuri.org/IServiceChat/StartGameResponse")]
        void StartGame(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/StartGame", ReplyAction="http://tempuri.org/IServiceChat/StartGameResponse")]
        System.Threading.Tasks.Task StartGameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        void SendMsg(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/ClearWindow")]
        void ClearWindow();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/ClearWindow")]
        System.Threading.Tasks.Task ClearWindowAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/DrawLine")]
        void DrawLine(System.Drawing.Point cords, System.Drawing.Point tempCords, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/DrawLine")]
        System.Threading.Tasks.Task DrawLineAsync(System.Drawing.Point cords, System.Drawing.Point tempCords, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetArtist", ReplyAction="http://tempuri.org/IServiceChat/GetArtistResponse")]
        bool GetArtist();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetArtist", ReplyAction="http://tempuri.org/IServiceChat/GetArtistResponse")]
        System.Threading.Tasks.Task<bool> GetArtistAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetArtistID", ReplyAction="http://tempuri.org/IServiceChat/GetArtistIDResponse")]
        int GetArtistID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetArtistID", ReplyAction="http://tempuri.org/IServiceChat/GetArtistIDResponse")]
        System.Threading.Tasks.Task<int> GetArtistIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetWord", ReplyAction="http://tempuri.org/IServiceChat/GetWordResponse")]
        string GetWord();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetWord", ReplyAction="http://tempuri.org/IServiceChat/GetWordResponse")]
        System.Threading.Tasks.Task<string> GetWordAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallback")]
        void MsgCallback(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/PaintingCallback")]
        void PaintingCallback(System.Drawing.Point cords, System.Drawing.Point tempCords, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetGameWord", ReplyAction="http://tempuri.org/IServiceChat/GetGameWordResponse")]
        void GetGameWord();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/FindArtist", ReplyAction="http://tempuri.org/IServiceChat/FindArtistResponse")]
        bool FindArtist();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/Win")]
        void Win(string name, string word);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/ClearWindowCallback")]
        void ClearWindowCallback();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/CreateClient", ReplyAction="http://tempuri.org/IServiceChat/CreateClientResponse")]
        void CreateClient();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : ClientGame.ChatClient.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<ClientGame.ChatClient.IServiceChat>, ClientGame.ChatClient.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name, bool haveArtist) {
            return base.Channel.Connect(name, haveArtist);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name, bool haveArtist) {
            return base.Channel.ConnectAsync(name, haveArtist);
        }
        
        public void StartGame(int id) {
            base.Channel.StartGame(id);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(int id) {
            return base.Channel.StartGameAsync(id);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMsg(string msg, int id) {
            base.Channel.SendMsg(msg, id);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string msg, int id) {
            return base.Channel.SendMsgAsync(msg, id);
        }
        
        public void ClearWindow() {
            base.Channel.ClearWindow();
        }
        
        public System.Threading.Tasks.Task ClearWindowAsync() {
            return base.Channel.ClearWindowAsync();
        }
        
        public void DrawLine(System.Drawing.Point cords, System.Drawing.Point tempCords, System.Drawing.Color color) {
            base.Channel.DrawLine(cords, tempCords, color);
        }
        
        public System.Threading.Tasks.Task DrawLineAsync(System.Drawing.Point cords, System.Drawing.Point tempCords, System.Drawing.Color color) {
            return base.Channel.DrawLineAsync(cords, tempCords, color);
        }
        
        public bool GetArtist() {
            return base.Channel.GetArtist();
        }
        
        public System.Threading.Tasks.Task<bool> GetArtistAsync() {
            return base.Channel.GetArtistAsync();
        }
        
        public int GetArtistID() {
            return base.Channel.GetArtistID();
        }
        
        public System.Threading.Tasks.Task<int> GetArtistIDAsync() {
            return base.Channel.GetArtistIDAsync();
        }
        
        public string GetWord() {
            return base.Channel.GetWord();
        }
        
        public System.Threading.Tasks.Task<string> GetWordAsync() {
            return base.Channel.GetWordAsync();
        }
    }
}
